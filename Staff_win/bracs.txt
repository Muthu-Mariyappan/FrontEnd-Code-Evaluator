#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>
#define SIZE 1000000

struct Stack{
    unsigned char  data[SIZE];
    int top;
};

struct Stack * createStack(){
    struct Stack * s=(struct Stack * )malloc(sizeof(struct Stack));
    s->top=-1;
    return s;
}

int isEmpty(struct Stack * s){
    return s->top==-1;
}

int isFull(struct Stack * s){
    
    return s->top==SIZE-1;
}

int spush(struct Stack * s1,unsigned char data){
    if(isFull(s1)) return 0;
    s1->data[++s1->top]=data;
    return 1;
}

unsigned char spop(struct Stack * s1){
    if(isEmpty(s1)) return 0;
    return s1->data[s1->top--];
}

unsigned char speek(struct Stack * s){
    if(isEmpty(s)) return 0;
    return s->data[s->top];
}

char rev(char cg){
    switch(cg){
        case ')':return '(';
        case '}':return '{';
        case ']':return '[';
    }
    return 0;
}

int process(struct Stack * s,char * str){
    int i=strlen(str);
    int j=0;
    while(j<i){
        if(str[j]=='('||str[j]=='{'||str[j]=='[')
            spush(s,str[j]);
        else{ 
            if(speek(s)==rev(str[j]))
                spop(s);
            else
                return 0;
        } 
        j++;
    }
    if(s->top==-01)
        return 1;
    else
        return 0;
}
               

int main(){
    int t; 
    struct Stack * st;
    scanf("%d",&t);
    st=createStack();
    for(int a0 = 0; a0 < t; a0++){
        st->top=-1;
        char* s = (char *)malloc(10240 * sizeof(char));
        scanf("%s",s);
        if(process(st,s))
            printf("YES\n");
        else
            printf("NO\n");
    }
    return 0;
}
